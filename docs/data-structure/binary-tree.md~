Program for Binary Tree
=======================

FEBRUARY 24, 2019 ~ SUNIL KUMAR
``` c
#include<stdio.h>
#include<stdlib.h>

struct node {
	int data;
	int height;
	struct node *left;
	struct node *right;
};

void insert(struct node **btree, int data) {
	if (*btree == NULL) {
		(*btree) = malloc(sizeof(struct node));
		(*btree)->data = data;
		(*btree)->left = (*btree)->right = NULL;
	} else {
		if (data > (*btree)->data) {
			insert(&((*btree)->right), data);
		} else {
			insert(&((*btree)->left), data);
		}
	}
}

struct node *xsucc(struct node *temp) {
	temp = temp->right;

	while (temp->left != NULL) {
		temp = temp->left;
	}
	return temp;
}

struct node *delete(struct node *xnode, int data) {

	if (xnode == NULL)
		return NULL;

	if (data < xnode->data) {
		xnode->left = delete(xnode->left, data);
	} else if (data > xnode->data) {
		xnode->right = delete(xnode->right, data);
	} else {
		if ((xnode->left == NULL) && (xnode->right != NULL)) {
printf("Found the node %d (Right)n", xnode->data);

struct node *temp = xnode->right;

free(xnode);

return temp;

} else if ((xnode->left != NULL) && (xnode->right == NULL)) {

printf("Found the node %d (Left)n", xnode->data);

struct node *temp = xnode->left;

free(xnode);

return temp;

} else if ((xnode->left == NULL) && (xnode->right == NULL)) {

free(xnode);

return NULL;

} else if ((xnode->left != NULL) && (xnode->right != NULL)) {

struct node *temp = xsucc(xnode);

printf("Found the xsucc node %dn", temp->data);

xnode->data = temp->data;

xnode->right = delete(xnode->right, temp->data);

} else {

printf("BUG: Found the node %dn", xnode->data);

}

}

return xnode;

}

void inorder(struct node *btree)

{

if (btree == NULL)

return;

inorder(btree->left);

printf("%d ", btree->data);

inorder(btree->right);

}

int height(struct node *xnode)

{

int lheight = 0, rheight = 0, ht = 0;

if (xnode == NULL)

return 0;

lheight = height(xnode->left);

rheight = height(xnode->right);

if (lheight > rheight) {

ht = lheight + 1;

} else {

ht = rheight + 1;

}

return ht;

}

void levelorder(struct node *btree)

{

struct node *temp[20] = { NULL };

int i = 0, c = 0;

if (btree == NULL)

return;

temp[0] = btree;

while (temp[c] != NULL) {

printf("%d ", temp[c]->data);

if (temp[c]->left != NULL) {

temp[i + 1] = temp[c]->left;

i++;

}

if (temp[c]->right != NULL) {

temp[i + 1] = temp[c]->right;

i++;

}

c++;

}

}

void main()

{

struct node *bst = NULL;

int values[] = { 34, 45, 22, 1, 79, 32, 90, 77, 3 };

//int values[] = {1,2,3,4,5};

int i, size;

size = sizeof(values) / sizeof(values[0]);

for (i = 0; i < size; i++) {

insert(&bst, values[i]);

}

printf("In-order traversal of BST(%d):n", size);

inorder(bst);

printf("n");

printf("Level-order traversal of BST(%d):n", size);

levelorder(bst);

printf("n");

printf("Height of BST(%d): %dn", size, height(bst->left));

//deleteNode(bst, 1);

delete(bst, 22);

size -= 1;

printf("Level-order traversal of BST after deletion (%d):n", size);

levelorder(bst);

printf("n");

}
```
